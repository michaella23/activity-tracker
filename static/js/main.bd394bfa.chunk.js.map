{"version":3,"sources":["Person.js","Activity.js","App.js","index.js"],"names":["Person","props","react_default","a","createElement","className","src","alt","value","onClick","renderValues","Activity","activityGrid","timeSpent","map","_ref","title","image","timeframe","id","current","previous","Fragment","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","timeFrame","setTimeFrame","activitiesArray","setDaily","data","forEach","activityObj","timeframes","daily","push","useEffect","event","_ref2","target","weekly","monthly","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"mlCAEe,SAASA,EAAOC,GAE3B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,IAAI,4BAA4BC,IAAI,oBAC9DL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,aAGfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UAAQI,MAAM,QAAQC,QAASR,EAAMS,cAArC,SACAR,EAAAC,EAAAC,cAAA,UAAQI,MAAM,SAASC,QAASR,EAAMS,cAAtC,UACAR,EAAAC,EAAAC,cAAA,UAAQI,MAAM,UAAUC,QAASR,EAAMS,cAAvC,aCdG,SAASC,EAASV,GAG7B,IAAMW,EAAeX,EAAMY,UAAUC,IAAI,SAAAC,GAA+B,IAA7BC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,UAErD,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAWW,GACZd,EAAAC,EAAAC,cAAA,OAAKE,IAAKW,EAAOV,IAAI,mBAEzBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,SAAIY,GACJd,EAAAC,EAAAC,cAAA,OAAKE,IAAI,6BAA6BC,IAAI,cAE9CL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,MAAIe,GAAG,iBAAiBD,EAAUE,QAAlC,QACAlB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,QAAMe,GAAG,qBAAT,eAA+CjB,EAAAC,EAAAC,cAAA,YAAOc,EAAUG,SAAjB,cAO3F,OACInB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmB,SAAA,KACKV,cC6BEW,MApDf,WAAe,IAAAC,EAEmBC,IAAMC,SAAS,IAFlCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAERM,EAFQH,EAAA,GAEGI,EAFHJ,EAAA,GAIXK,EAAkB,GAEtB,SAASC,IACPC,EAAKC,QAAQ,SAAApB,GAAgC,IAA9BC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,MAChBmB,EAAc,CAChBpB,MAAOA,EACPE,UAHyCH,EAAhBsB,WAGHC,MACtBrB,MAAOA,GAETe,EAAgBO,KAAKH,KAEvBL,EAAaC,GAyBb,OArBFP,IAAMe,UAAU,kBAAMP,GAAU,IAsB1B/B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAACJ,EAAD,CACEU,aApBV,SAAmB+B,GACjBP,EAAKC,QAAQ,SAAAO,GAAgC,IAA9B1B,EAA8B0B,EAA9B1B,MAAOC,EAAuByB,EAAvBzB,MAAOoB,EAAgBK,EAAhBL,WAEvBD,EAAc,CAChBpB,MAAOA,EAEPE,UAAkC,UAAvBuB,EAAME,OAAOnC,MAAoB6B,EAAWC,MACrB,WAAvBG,EAAME,OAAOnC,MAAqB6B,EAAWO,OACZP,EAAWQ,QAEvD5B,MAAOA,GAETe,EAAgBO,KAAKH,KAEvBL,EAAaC,MAQP9B,EAAAC,EAAAC,cAACO,EAAD,CACEE,UAAWiB,MC/CRgB,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhD,EAAAC,EAAAC,cAACF,EAAAC,EAAMgD,WAAP,KACEjD,EAAAC,EAAAC,cAACgD,EAAD","file":"static/js/main.bd394bfa.chunk.js","sourcesContent":["import React from \"react\" \n\nexport default function Person(props) {\n\n    return (\n        <div className=\"grid-item person\">\n          <div className=\"jeremy\">\n            <img className=\"headshot\" src='./images/image-jeremy.png' alt=\"Jeremy headshot\" />\n            <div>\n              <p>report for</p>\n              <h1>Jeremy <span className=\"last\">Robson</span></h1>\n            </div>\n          </div>\n          <div className=\"bottom\">  \n            <button value=\"daily\" onClick={props.renderValues}>daily</button> \n            <button value=\"weekly\" onClick={props.renderValues}>weekly</button>\n            <button value=\"monthly\" onClick={props.renderValues}>monthly</button>\n          </div>\n      </div>\n    )\n}\n","import React from \"react\"\n\nexport default function Activity(props) {\n\n    // need conditional rendering from daily, weekly, monthly, that can plug into the object notation\n    const activityGrid = props.timeSpent.map(({title, image, timeframe}) => { // destructured 'activity' object\n                                                // since it's destructured, I don't have the repetition of activity.title, activity.image, etc. in the code below\n        return (\n            <div className=\"grid-item\">\n                <div className={title}> \n                    <img src={image} alt=\"activity icon\"/>\n                </div>\n                <div className=\"card\">\n                    <div className=\"activity\">\n                        <p>{title}</p>\n                        <img src=\"./images/icon-ellipsis.svg\" alt=\"ellipsis\" />\n                    </div>\n                    <div className=\"time\">\n                        <h1 id=\"activity-time\">{timeframe.current} hrs</h1>\n                        <p className=\"previous\"><span id=\"activity-previous\">previous - </span><span>{timeframe.previous} hrs</span></p>\n                    </div>\n                </div>\n            </div>\n        )    \n    })\n\n    return (\n        <>\n            {activityGrid}\n        </>\n    )\n}\n","import React from 'react'\nimport Person from \"./Person\"\nimport Activity from \"./Activity\"\nimport data from \"./data.json\"\n\nfunction App() {\n\nconst [timeFrame, setTimeFrame] = React.useState([]) \n\nlet activitiesArray = []\n\nfunction setDaily() {\n  data.forEach(({title, image, timeframes}) => {\n    let activityObj = {\n      title: title,\n      timeframe: timeframes.daily,\n      image: image\n    }\n    activitiesArray.push(activityObj)\n  })\n  setTimeFrame(activitiesArray)\n}\n\n// rendering Daily view on load\nReact.useEffect(() => setDaily, [])\n\n\n// this function allows display of dynamic values based on the event target button value\nfunction setValues(event) {\n  data.forEach(({title, image, timeframes}) => { // destructured 'activity' object\n    // since it's destructured, I don't have the repetition of activity.title, activity.image, etc. in the code below\n    let activityObj = {\n      title: title,\n      // here I use the event target (I gave each of the buttons a value) to conditionally render the data\n      timeframe: event.target.value === \"daily\" ? timeframes.daily :\n                 event.target.value === \"weekly\" ? timeframes.weekly :\n                                                  timeframes.monthly,                   \n\n      image: image\n    }\n    activitiesArray.push(activityObj)\n  })\n  setTimeFrame(activitiesArray)\n}\n\n  return (\n      <main className='grid'>\n        <Person\n          renderValues={setValues}\n        />\n        <Activity \n          timeSpent={timeFrame} /* current state */\n        />\n      </main>\n  );\n}\n\nexport default App;\n\n\n\n/* \n\nfunction setDaily() {\n  data.forEach(({title, image, timeframes}) => {\n    let activityObj = {\n      title: title,\n      timeframe: timeframes.daily,\n      image: image\n    }\n    activitiesArray.push(activityObj)\n  })\n  setTimeFrame(activitiesArray)\n}\n\nfunction setWeekly() {\n  data.forEach(({title, image, timeframes}) => {\n    let activityObj = {\n      title: title,\n      timeframe: timeframes.weekly,\n      image: image\n    }\n    activitiesArray.push(activityObj)\n  })\n  setTimeFrame(activitiesArray)\n}\n\nfunction setMonthly() {\n  data.forEach(({title, image, timeframes}) => {\n    let activityObj = {\n      title: title,\n      timeframe: timeframes.monthly,\n      image: image\n    }\n    activitiesArray.push(activityObj)\n  })\n  setTimeFrame(activitiesArray)\n}\n\n\nfunction setValues(event) {\n  data.forEach(({title, image, timeframes}) => { // destructured 'activity' object\n    // since it's destructured, I don't have the repetition of activity.title, activity.image, etc. in the code below\n    let activityObj = {\n      title: title,\n      // here I use the event target (I gave each of the buttons a value) to conditionally render the data\n      timeframe: event.target.value === \"daily\" ? timeframes.daily :\n                 event.target.value === \"weekly\" ? timeframes.weekly :\n                                                  timeframes.monthly,                   \n\n      image: image\n    }\n    activitiesArray.push(activityObj)\n  })\n  setTimeFrame(activitiesArray)\n}\n\n */\n\n/*\n            renderDaily={setDaily}\n            renderWeekly={setWeekly}\n            renderMonthly={setMonthly}\n*/\n\n\n\n// timeframes an object with 3 other objects\n// this returns daily, weekly, monthly for first object 'Work'// need to loop over data, conditionally render daily, weekly, or monthly with button click\n// properties... maybe something will be equal to timeFrame, which will be toggled\n// need to return current and previous  and use a conditional for daily, weekly, monthly\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}